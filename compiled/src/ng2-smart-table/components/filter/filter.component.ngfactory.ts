/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../src/ng2-smart-table/components/filter/filter.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from './filter.scss.shim.ngstyle';
import * as import10 from '../../../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import11 from '../../../../node_modules/@angular/forms/src/directives/default_value_accessor.ngfactory';
import * as import12 from '../../../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import13 from '../../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from '@angular/common/src/directives/ng_class';
import * as import19 from '@angular/forms/src/directives/default_value_accessor';
import * as import20 from '@angular/forms/src/directives/control_value_accessor';
import * as import21 from '@angular/forms/src/directives/ng_model';
import * as import22 from '@angular/forms/src/directives/ng_control';
import * as import23 from '@angular/forms/src/directives/ng_control_status';
import * as import24 from '../../../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import25 from '@angular/core/src/linker/template_ref';
import * as import26 from '@angular/common/src/directives/ng_if';
export class Wrapper_FilterComponent {
  /*private*/ _eventHandler:Function;
  context:import0.FilterComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  subscription0:any;
  constructor() {
    this._changed = false;
    this.context = new import0.FilterComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_column(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.column = currValue;
      this._expr_0 = currValue;
    }
  }
  check_source(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.source = currValue;
      this._expr_1 = currValue;
    }
  }
  check_inputClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.inputClass = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.filter.subscribe(_eventHandler.bind(view,'filter'))); }
  }
}
var renderType_FilterComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_FilterComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.FilterComponent>;
  _FilterComponent_0_3:Wrapper_FilterComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FilterComponent_Host0,renderType_FilterComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ng2-smart-table-filter',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_FilterComponent0(this.viewUtils,this,0,this._el_0);
    this._FilterComponent_0_3 = new Wrapper_FilterComponent();
    this.compView_0.create(this._FilterComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._FilterComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.FilterComponent) && (0 === requestNodeIndex))) { return this._FilterComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._FilterComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._FilterComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._FilterComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const FilterComponentNgFactory:import8.ComponentFactory<import0.FilterComponent> = new import8.ComponentFactory<import0.FilterComponent>('ng2-smart-table-filter',View_FilterComponent_Host0,import0.FilterComponent);
const styles_FilterComponent:any[] = [import9.styles];
class View_FilterComponent1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _NgClass_2_3:import10.Wrapper_NgClass;
  _DefaultValueAccessor_2_4:import11.Wrapper_DefaultValueAccessor;
  _NG_VALUE_ACCESSOR_2_5:any[];
  _NgModel_2_6:import12.Wrapper_NgModel;
  _NgControl_2_7:any;
  _NgControlStatus_2_8:import13.Wrapper_NgControlStatus;
  _text_3:any;
  /*private*/ _expr_10:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_FilterComponent1,renderType_FilterComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_10 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray2(2,'class','ng2-smart-filter'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'input',new import3.InlineArray4(4,'class','form-control','type','text'),(null as any));
    this._NgClass_2_3 = new import10.Wrapper_NgClass(this.parentView.injectorGet(import15.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import16.KeyValueDiffers,this.parentIndex),new import17.ElementRef(this._el_2),this.renderer);
    this._DefaultValueAccessor_2_4 = new import11.Wrapper_DefaultValueAccessor(this.renderer,new import17.ElementRef(this._el_2));
    this._NG_VALUE_ACCESSOR_2_5 = [this._DefaultValueAccessor_2_4.context];
    this._NgModel_2_6 = new import12.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_2_5);
    this._NgControl_2_7 = this._NgModel_2_6.context;
    this._NgControlStatus_2_8 = new import13.Wrapper_NgControlStatus(this._NgControl_2_7);
    this._text_3 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray8(8,'ngModelChange',(null as any),'keyup',(null as any),'input',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_2));
    this._NgModel_2_6.subscribe(this,this.eventHandler(this.handleEvent_2),true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.NgClass) && (2 === requestNodeIndex))) { return this._NgClass_2_3.context; }
    if (((token === import19.DefaultValueAccessor) && (2 === requestNodeIndex))) { return this._DefaultValueAccessor_2_4.context; }
    if (((token === import20.NG_VALUE_ACCESSOR) && (2 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_2_5; }
    if (((token === import21.NgModel) && (2 === requestNodeIndex))) { return this._NgModel_2_6.context; }
    if (((token === import22.NgControl) && (2 === requestNodeIndex))) { return this._NgControl_2_7; }
    if (((token === import23.NgControlStatus) && (2 === requestNodeIndex))) { return this._NgControlStatus_2_8.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = 'form-control';
    this._NgClass_2_3.check_klass(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.parentView.context.inputClass;
    this._NgClass_2_3.check_ngClass(currVal_2_0_1,throwOnChange,false);
    this._NgClass_2_3.ngDoCheck(this,this._el_2,throwOnChange);
    this._DefaultValueAccessor_2_4.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_2_2_0:any = this.parentView.context.query;
    this._NgModel_2_6.check_model(currVal_2_2_0,throwOnChange,false);
    this._NgModel_2_6.ngDoCheck(this,this._el_2,throwOnChange);
    this._NgControlStatus_2_8.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_10:any = import3.inlineInterpolate(1,'',this.parentView.context.column.title,'');
    if (import3.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementProperty(this._el_2,'placeholder',currVal_10);
      this._expr_10 = currVal_10;
    }
    this._NgControlStatus_2_8.checkHost(this,this,this._el_2,throwOnChange);
  }
  destroyInternal():void {
    this._NgModel_2_6.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._DefaultValueAccessor_2_4.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.parentView.context.query = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'keyup')) {
      const pd_sub_1:any = ((<any>this.parentView.context._filter($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}
var renderType_FilterComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.Emulated,styles_FilterComponent,{});
export class View_FilterComponent0 extends import2.AppView<import0.FilterComponent> {
  _text_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import14.ViewContainer;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import24.Wrapper_NgIf;
  _text_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_FilterComponent0,renderType_FilterComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_1 = new import14.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import25.TemplateRef_(this,1,this._anchor_1);
    this._NgIf_1_6 = new import24.Wrapper_NgIf(this._vc_1.vcRef,this._TemplateRef_1_5);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._anchor_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import26.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.column.isFilterable;
    this._NgIf_1_6.check_ngIf(currVal_1_0_0,throwOnChange,false);
    this._NgIf_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 1)) { return new View_FilterComponent1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
}