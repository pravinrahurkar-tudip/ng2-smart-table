/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../src/ng2-smart-table/components/cell/cell-editors/select-editor.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../../../../../node_modules/@angular/forms/src/directives/select_control_value_accessor.ngfactory';
import * as import10 from '../../../../../node_modules/@angular/forms/src/directives/select_multiple_control_value_accessor.ngfactory';
import * as import11 from '@angular/core/src/linker/view_container';
import * as import12 from '@angular/core/src/linker/element_ref';
import * as import13 from '@angular/forms/src/directives/select_control_value_accessor';
import * as import14 from '@angular/forms/src/directives/select_multiple_control_value_accessor';
import * as import15 from '../../../../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import16 from '../../../../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import17 from '../../../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import18 from '../../../../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import19 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import20 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import21 from '@angular/core/src/linker/template_ref';
import * as import22 from '@angular/common/src/directives/ng_for';
import * as import23 from '@angular/common/src/directives/ng_class';
import * as import24 from '@angular/forms/src/directives/control_value_accessor';
import * as import25 from '@angular/forms/src/directives/ng_model';
import * as import26 from '@angular/forms/src/directives/ng_control';
import * as import27 from '@angular/forms/src/directives/ng_control_status';
export class Wrapper_SelectEditorComponent {
  /*private*/ _eventHandler:Function;
  context:import0.SelectEditorComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor() {
    this._changed = false;
    this.context = new import0.SelectEditorComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_cell(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.cell = currValue;
      this._expr_0 = currValue;
    }
  }
  check_inputClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.inputClass = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onStopEditing.subscribe(_eventHandler.bind(view,'onStopEditing'))); }
    if (emit1) { (this.subscription1 = this.context.onEdited.subscribe(_eventHandler.bind(view,'onEdited'))); }
    if (emit2) { (this.subscription2 = this.context.onClick.subscribe(_eventHandler.bind(view,'onClick'))); }
  }
}
var renderType_SelectEditorComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_SelectEditorComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.SelectEditorComponent>;
  _SelectEditorComponent_0_3:Wrapper_SelectEditorComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_SelectEditorComponent_Host0,renderType_SelectEditorComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'select-editor',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_SelectEditorComponent0(this.viewUtils,this,0,this._el_0);
    this._SelectEditorComponent_0_3 = new Wrapper_SelectEditorComponent();
    this.compView_0.create(this._SelectEditorComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._SelectEditorComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.SelectEditorComponent) && (0 === requestNodeIndex))) { return this._SelectEditorComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._SelectEditorComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._SelectEditorComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const SelectEditorComponentNgFactory:import8.ComponentFactory<import0.SelectEditorComponent> = new import8.ComponentFactory<import0.SelectEditorComponent>('select-editor',View_SelectEditorComponent_Host0,import0.SelectEditorComponent);
const styles_SelectEditorComponent:any[] = ([] as any[]);
class View_SelectEditorComponent1 extends import2.AppView<any> {
  _el_0:any;
  _NgSelectOption_0_3:import9.Wrapper_NgSelectOption;
  _NgSelectMultipleOption_0_4:import10.Wrapper_NgSelectMultipleOption;
  _text_1:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import11.ViewContainer) {
    super(View_SelectEditorComponent1,renderType_SelectEditorComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'option',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._NgSelectOption_0_3 = new import9.Wrapper_NgSelectOption(new import12.ElementRef(this._el_0),this.renderer,(<View_SelectEditorComponent0>this.parentView)._SelectControlValueAccessor_1_4.context);
    this._NgSelectMultipleOption_0_4 = new import10.Wrapper_NgSelectMultipleOption(new import12.ElementRef(this._el_0),this.renderer,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.NgSelectOption) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgSelectOption_0_3.context; }
    if (((token === import14.NgSelectMultipleOption) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgSelectMultipleOption_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.context.$implicit.value;
    this._NgSelectOption_0_3.check_value(currVal_0_0_0,throwOnChange,false);
    this._NgSelectOption_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_0_1_0:any = this.context.$implicit.value;
    this._NgSelectMultipleOption_0_4.check_value(currVal_0_1_0,throwOnChange,false);
    this._NgSelectMultipleOption_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_4:any = (this.context.$implicit.value === this.parentView.context.cell.getValue());
    if (import3.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementProperty(this._el_0,'selected',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = import3.inlineInterpolate(1,'',this.context.$implicit.title,'\n        ');
    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setText(this._text_1,currVal_5);
      this._expr_5 = currVal_5;
    }
  }
  destroyInternal():void {
    this._NgSelectOption_0_3.ngOnDestroy();
    this._NgSelectMultipleOption_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
var renderType_SelectEditorComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_SelectEditorComponent,{});
export class View_SelectEditorComponent0 extends import2.AppView<import0.SelectEditorComponent> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import15.Wrapper_NgClass;
  _SelectControlValueAccessor_1_4:import9.Wrapper_SelectControlValueAccessor;
  _NG_VALUE_ACCESSOR_1_5:any[];
  _NgModel_1_6:import16.Wrapper_NgModel;
  _NgControl_1_7:any;
  _NgControlStatus_1_8:import17.Wrapper_NgControlStatus;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import11.ViewContainer;
  _TemplateRef_3_5:any;
  _NgFor_3_6:import18.Wrapper_NgFor;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_SelectEditorComponent0,renderType_SelectEditorComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'select',new import3.InlineArray2(2,'class','form-control'),(null as any));
    this._NgClass_1_3 = new import15.Wrapper_NgClass(this.parentView.injectorGet(import19.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import20.KeyValueDiffers,this.parentIndex),new import12.ElementRef(this._el_1),this.renderer);
    this._SelectControlValueAccessor_1_4 = new import9.Wrapper_SelectControlValueAccessor(this.renderer,new import12.ElementRef(this._el_1));
    this._NG_VALUE_ACCESSOR_1_5 = [this._SelectControlValueAccessor_1_4.context];
    this._NgModel_1_6 = new import16.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_1_5);
    this._NgControl_1_7 = this._NgModel_1_6.context;
    this._NgControlStatus_1_8 = new import17.Wrapper_NgControlStatus(this._NgControl_1_7);
    this._text_2 = this.renderer.createText(this._el_1,'\n\n        ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import11.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import21.TemplateRef_(this,3,this._anchor_3);
    this._NgFor_3_6 = new import18.Wrapper_NgFor(this._vc_3.vcRef,this._TemplateRef_3_5,this.parentView.injectorGet(import19.IterableDiffers,this.parentIndex),this.ref);
    this._text_4 = this.renderer.createText(this._el_1,'\n    ',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray16(12,'ngModelChange',(null as any),'click',(null as any),'keydown.enter',(null as any),'keydown.esc',(null as any),'change',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_1));
    this._NgModel_1_6.subscribe(this,this.eventHandler(this.handleEvent_1),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import21.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import22.NgFor) && (3 === requestNodeIndex))) { return this._NgFor_3_6.context; }
    if (((token === import23.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgClass_1_3.context; }
    if (((token === import13.SelectControlValueAccessor) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._SelectControlValueAccessor_1_4.context; }
    if (((token === import24.NG_VALUE_ACCESSOR) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NG_VALUE_ACCESSOR_1_5; }
    if (((token === import25.NgModel) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgModel_1_6.context; }
    if (((token === import26.NgControl) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgControl_1_7; }
    if (((token === import27.NgControlStatus) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgControlStatus_1_8.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = 'form-control';
    this._NgClass_1_3.check_klass(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.inputClass;
    this._NgClass_1_3.check_ngClass(currVal_1_0_1,throwOnChange,false);
    this._NgClass_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this._SelectControlValueAccessor_1_4.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_1_2_0:any = this.context.cell.getId();
    this._NgModel_1_6.check_name(currVal_1_2_0,throwOnChange,false);
    const currVal_1_2_1:boolean = !this.context.cell.isEditable();
    this._NgModel_1_6.check_isDisabled(currVal_1_2_1,throwOnChange,false);
    const currVal_1_2_2:any = this.context.cell.newValue;
    this._NgModel_1_6.check_model(currVal_1_2_2,throwOnChange,false);
    this._NgModel_1_6.ngDoCheck(this,this._el_1,throwOnChange);
    this._NgControlStatus_1_8.ngDoCheck(this,this._el_1,throwOnChange);
    var tmp_3_0_0_0:any = (null as any);
    const currVal_3_0_0:any = (((tmp_3_0_0_0 = this.context.cell.getColumn().getConfig()) == null)? (null as any): tmp_3_0_0_0.list);
    this._NgFor_3_6.check_ngForOf(currVal_3_0_0,throwOnChange,false);
    this._NgFor_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
    this._NgControlStatus_1_8.checkHost(this,this,this._el_1,throwOnChange);
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
    this._NgModel_1_6.ngOnDestroy();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 3)) { return new View_SelectEditorComponent1(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._SelectControlValueAccessor_1_4.handleEvent(eventName,$event) && result);
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.cell.newValue = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_1:any = ((<any>this.context.onClick.emit($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'keydown.enter')) {
      const pd_sub_2:any = ((<any>this.context.onEdited.emit($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'keydown.esc')) {
      const pd_sub_3:any = ((<any>this.context.onStopEditing.emit()) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
}