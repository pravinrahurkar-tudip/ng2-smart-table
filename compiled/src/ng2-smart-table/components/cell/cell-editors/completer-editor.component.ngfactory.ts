/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../../../src/ng2-smart-table/components/cell/cell-editors/completer-editor.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from 'ng2-completer/services/completer-service';
import * as import10 from 'ng2-completer/components/completer-cmp';
import * as import11 from '../../../../../node_modules/ng2-completer/components/completer-cmp.ngfactory';
import * as import12 from '../../../../../node_modules/@angular/forms/src/directives/ng_model.ngfactory';
import * as import13 from '../../../../../node_modules/@angular/forms/src/directives/ng_control_status.ngfactory';
import * as import14 from '@angular/forms/src/directives/control_value_accessor';
import * as import15 from '@angular/forms/src/directives/ng_model';
import * as import16 from '@angular/forms/src/directives/ng_control';
import * as import17 from '@angular/forms/src/directives/ng_control_status';
export class Wrapper_CompleterEditorComponent {
  /*private*/ _eventHandler:Function;
  context:import0.CompleterEditorComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.CompleterEditorComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_cell(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.cell = currValue;
      this._expr_0 = currValue;
    }
  }
  check_inputClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.inputClass = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onStopEditing.subscribe(_eventHandler.bind(view,'onStopEditing'))); }
    if (emit1) { (this.subscription1 = this.context.onEdited.subscribe(_eventHandler.bind(view,'onEdited'))); }
    if (emit2) { (this.subscription2 = this.context.onClick.subscribe(_eventHandler.bind(view,'onClick'))); }
  }
}
var renderType_CompleterEditorComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_CompleterEditorComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.CompleterEditorComponent>;
  _CompleterEditorComponent_0_3:Wrapper_CompleterEditorComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CompleterEditorComponent_Host0,renderType_CompleterEditorComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'completer-editor',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_CompleterEditorComponent0(this.viewUtils,this,0,this._el_0);
    this._CompleterEditorComponent_0_3 = new Wrapper_CompleterEditorComponent(this.injectorGet(import9.CompleterService,this.parentIndex));
    this.compView_0.create(this._CompleterEditorComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._CompleterEditorComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.CompleterEditorComponent) && (0 === requestNodeIndex))) { return this._CompleterEditorComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._CompleterEditorComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._CompleterEditorComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const CompleterEditorComponentNgFactory:import8.ComponentFactory<import0.CompleterEditorComponent> = new import8.ComponentFactory<import0.CompleterEditorComponent>('completer-editor',View_CompleterEditorComponent_Host0,import0.CompleterEditorComponent);
const styles_CompleterEditorComponent:any[] = ([] as any[]);
var renderType_CompleterEditorComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_CompleterEditorComponent,{});
export class View_CompleterEditorComponent0 extends import2.AppView<import0.CompleterEditorComponent> {
  _text_0:any;
  _el_1:any;
  compView_1:import2.AppView<import10.CompleterCmp>;
  _CompleterCmp_1_3:import11.Wrapper_CompleterCmp;
  _NG_VALUE_ACCESSOR_1_4:any[];
  _NgModel_1_5:import12.Wrapper_NgModel;
  _NgControl_1_6:any;
  _NgControlStatus_1_7:import13.Wrapper_NgControlStatus;
  _text_2:any;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CompleterEditorComponent0,renderType_CompleterEditorComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'ng2-completer',import3.EMPTY_INLINE_ARRAY,(null as any));
    this.compView_1 = new import11.View_CompleterCmp0(this.viewUtils,this,1,this._el_1);
    this._CompleterCmp_1_3 = new import11.Wrapper_CompleterCmp();
    this._NG_VALUE_ACCESSOR_1_4 = [this._CompleterCmp_1_3.context];
    this._NgModel_1_5 = new import12.Wrapper_NgModel((null as any),(null as any),(null as any),this._NG_VALUE_ACCESSOR_1_4);
    this._NgControl_1_6 = this._NgModel_1_5.context;
    this._NgControlStatus_1_7 = new import13.Wrapper_NgControlStatus(this._NgControl_1_6);
    this._text_2 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_1.create(this._CompleterCmp_1_3.context);
    this._text_3 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray4(4,'ngModelChange',(null as any),'selected',(null as any)),this.eventHandler(this.handleEvent_1));
    this._CompleterCmp_1_3.subscribe(this,this.eventHandler(this.handleEvent_1),true,false,false);
    this._NgModel_1_5.subscribe(this,this.eventHandler(this.handleEvent_1),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.CompleterCmp) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._CompleterCmp_1_3.context; }
    if (((token === import14.NG_VALUE_ACCESSOR) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._NG_VALUE_ACCESSOR_1_4; }
    if (((token === import15.NgModel) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._NgModel_1_5.context; }
    if (((token === import16.NgControl) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._NgControl_1_6; }
    if (((token === import17.NgControlStatus) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 2)))) { return this._NgControlStatus_1_7.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.cell.getColumn().getConfig().completer.dataService;
    this._CompleterCmp_1_3.check_dataService(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = (this.context.cell.getColumn().getConfig().completer.pause || 0);
    this._CompleterCmp_1_3.check_pause(currVal_1_0_1,throwOnChange,false);
    const currVal_1_0_2:any = (this.context.cell.getColumn().getConfig().completer.minSearchLength || 0);
    this._CompleterCmp_1_3.check_minSearchLength(currVal_1_0_2,throwOnChange,false);
    const currVal_1_0_3:any = (this.context.cell.getColumn().getConfig().completer.placeholder || 'Start typing...');
    this._CompleterCmp_1_3.check_placeholder(currVal_1_0_3,throwOnChange,false);
    this._CompleterCmp_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    const currVal_1_1_0:any = this.context.completerStr;
    this._NgModel_1_5.check_model(currVal_1_1_0,throwOnChange,false);
    this._NgModel_1_5.ngDoCheck(this,this._el_1,throwOnChange);
    this._NgControlStatus_1_7.ngDoCheck(this,this._el_1,throwOnChange);
    this._NgControlStatus_1_7.checkHost(this,this.compView_1,this._el_1,throwOnChange);
    this.compView_1.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this._CompleterCmp_1_3.ngOnDestroy();
    this._NgModel_1_5.ngOnDestroy();
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'ngModelChange')) {
      const pd_sub_0:any = ((<any>(this.context.completerStr = $event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'selected')) {
      const pd_sub_1:any = ((<any>this.context.onEditedCompleter($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}